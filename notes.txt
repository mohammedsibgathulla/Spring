1. Quick Introduction to Spring Framework
Dependency Injection solves the problem of tight coupling of code.
@Component - Spring manages the instances of the classes using the @Component.
@Autowired - Spring will autowire the dependency and populate it.

Important Terminology of Spring Framework
1. Beans - Differenct objects managed by spring framework.
2. Autowiring - Process where spring identifies the dependencies and identifies the matches for the dependencies and populates them.
3. Dependency Injection - Dependency Injection solves the problem of tight coupling of code and we don't need to instantiate the classes.
4. Inversion of Control - We are taking the control from the class which needs the dependency and giving the control to the spring framework.
5. IOC Container - It is a generic terminology to represent anything that is implementing IOC.
6. Application Context - In Spring Application Context is the IOC Container.

2. Setting Up Spring Boot Project Using http://start.spring.io
1. Just download the basic spring boot project without any dependencies.

3. Understanding the tight coupling.
- See the project.

4. Using Spring Framework To Manage Dependencies - @Component, @Autowired
- @springBootApplication tells spring to scan the package and subpackages in which it is declared.

5. Dynamic Auto Wiring
- When a dependency has more than one bean then we need to specify which bean to be used as primary during autowiring.
@Primary - It is used to specy a bean as primary when we have two beans of same implementation.

6. Constructor & Setter Injection
Constuctor - Autowiring by type from bean name  via constructor 
Setter -  Autowiring by type from bean name 'binarySearchImpl' to bean named 'bubbleSortAlgorithm'
No Setter or Constructor - Autowiring by type from bean name 'binarySearchImpl' to bean named 'bubbleSortAlgorithm'

7. Spring Modules
- Spring has different modules Core Container, Data Access / Integration, Web.
- Test, AOP, Aspects, Instrumentation, Messaging (These are called as cross cutting modules as they are applicable to more than one layer).

8. Spring Projects
- See the image.

9. Dependency Injection Few More Examples
ToDoController(Web Layer) (@Autowired)-> ToDoDataService(Business Layer) (@Autowired)-> (Data Layer) JdbcTemplate

10. Autowiring In Depth By Name & @Primary
- You can just use bean name of any bean implementing the interface and autowire it instead of @Primary annotation.
- If you use both name and @Primary the preference will be give to @Primary and that particular bean is used in the autowiring.



