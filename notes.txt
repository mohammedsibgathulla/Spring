1. Quick Introduction to Spring Framework
Dependency Injection solves the problem of tight coupling of code.
@Component - Spring manages the instances of the classes using the @Component.
@Autowired - Spring will autowire the dependency and populate it.

Important Terminology of Spring Framework
1. Beans - Differenct objects managed by spring framework.
2. Autowiring - Process where spring identifies the dependencies and identifies the matches for the dependencies and populates them.
3. Dependency Injection - Dependency Injection solves the problem of tight coupling of code and we don't need to instantiate the classes.
4. Inversion of Control - We are taking the control from the class which needs the dependency and giving the control to the spring framework.
5. IOC Container - It is a generic terminology to represent anything that is implementing IOC.
6. Application Context - In Spring Application Context is the IOC Container.

2. Setting Up Spring Boot Project Using http://start.spring.io
1. Just download the basic spring boot project without any dependencies.

3. Understanding the tight coupling.
- See the project.

4. Using Spring Framework To Manage Dependencies - @Component, @Autowired
- @springBootApplication tells spring to scan the package and subpackages in which it is declared.

5. Dynamic Auto Wiring
- When a dependency has more than one bean then we need to specify which bean to be used as primary during autowiring.
@Primary - It is used to specify a bean as primary when we have two beans of same implementation.

6. Constructor & Setter Injection
Constuctor - Autowiring by type from bean name  via constructor 
Setter -  Autowiring by type from bean name 'binarySearchImpl' to bean named 'bubbleSortAlgorithm'
No Setter or Constructor - Autowiring by type from bean name 'binarySearchImpl' to bean named 'bubbleSortAlgorithm'

7. Spring Modules
- Spring has different modules Core Container, Data Access / Integration, Web.
- Test, AOP, Aspects, Instrumentation, Messaging (These are called as cross cutting modules as they are applicable to more than one layer).

8. Spring Projects
- See the image.

9. Dependency Injection Few More Examples
ToDoController(Web Layer) (@Autowired)-> ToDoDataService(Business Layer) (@Autowired)-> (Data Layer) JdbcTemplate

10. Autowiring In Depth By Name & @Primary
- You can just use bean name of any bean implementing the interface and autowire it instead of @Primary annotation.
- If you use both name and @Primary the preference will be give to @Primary and that particular bean is used in the autowiring.

11. Autowiring In Depth @Qualifer Annotation
- @Qualifier("quick") you have to use it on both the dependency and the bean name which u want to use for autowiring.

12. Scope Of A Bean - Prototype & Singleton
- @Scope(ConfigurableBeanFactory.SCOPE_SINGLETON) singleton Bean - One instance per Spring Context (In Spring by default any bean is a singleton bean).
- @Scope("prototype") / @Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE): prototype Bean - U will get a new bean when ever requested.
- request - One bean per HTTP request.
- session - One bean per HTTP session.

13. Complex Scope Scenarios Of A Spring Bean Mix Prototype and Singleton
- When you use singleton with the bean and if dependency bean has prototype it will not be implemented hence in order to apply it we need to configure the proxy on the dependency bean.
- @Scope(value=ConfigurableBeanFactory.SCOPE_PROTOTYPE, proxyMode = ScopedProxyMode.TARGET_CLASS)

14. Difference Between Spring Singleton & GOF (Gang Of Four) Singleton
- GOF Singleton is one Singleton per JVM even if u have multiple Application Contexts are running in the same JVM u should have once instance of that specific class.
- In Spring one Instance per Application Context if you have 5 Application Context a hypothetical scenario then u will have 5 instances.

15. Using Component Scan To Scan For Beans
- @ComponentScan("package") This annotation will scan the beans from the package u have specified. If u specify the root pacakge then all the beans will be scanned.
- @SpringBootApplication This will scan for the beans in the current package.

16. Lifecycle Of A Bean - @PostConstruct And @PreDestroy
- The entire life cycle of bean is managed by the Spring IOC container.
@PostConstruct: Do certain things during the creation of the bean. The post construct is called after the dependencies and autowiring is done.
@PostDestroy: Do certaion things before the bean is destroyed.

17. Container / Context & Dependency Injection (CDI) - @Named, @Inject
- CDI is Java EE Dependency Injection Standard
- Spring supports most annotations
@Inject (@Autowired)
@Named (@Component & @Qualifer) 
@Singleton (Defines a scope of Singleton)
- You need to add the dependency of maven in pom.xml in order to use the above annotations.

18. Removing Spring Boot In Basic Application
@Configuration & @ComponentScan are used instead of @SpringBootApplication to initialize the Application Context in java way instead of SpringBoot.
- See the project for more details.

19. Defining Spring Application Context Using XML
- If we use xml approach the file will have a lot of lines due to which it will be very difficult to maintain.
- See the project for more details.

20. Mixing XML Context With Component Scan For Beans Defined With Annotation
- <context:component-scan base-package="com.spring.basics"></context:component-scan> By defining the code the spring will scan all the beans including the annotated beans and as well as xml defined beans in the project.

21. IOC Container vs Application Context vs Bean Factory
IOC Container: It is a generic terminology to represent anything that is implementing IOC.
Bean Factory: It provides basic management of beans and wiring of dependencies. It is used in devices where the memory is very less like (IOT devices)
Application Context: Bean Factory ++, Spring AOP Features, I18n capabilites, Web Application Context for web Applications etc. 

22. @Component vs @Service vs @Repository vs @Controller
The below are the different stereotypes where are present in the spring.
@Component: Generic Component
@Service: Business Service Facade
@Repository: Encapsulating Storage, retrival and search behaviour typically from a relational database
@Controller: It is used to define a controller in the web layer (Controller in MVC Pattern)
By defining these annotations you can apply different logic
You want to log everything coming into your business layer in that kind of scenario you will be able to identify everything that has an @service annotation you can use AOP to identify that and you can log all the content.

22. Read Values From External Properties File
@Value("${some.service.url}"): This annotation is used to read the value from the external properties file.
@PropertySource("classpath:app.properties"): In order to tell the configuration to load the external properties file.

23. What Is JUnit & Unit Testing?
Screen Testing / System Testing: Testing the entire application after deployment then it is called as Screen Testing / System Testing.
Unit Testing: Testing the specific method or a group of methods of a class.
JUnit: It is a framework which will help you to call the specific method and check the output is as expected. It helps to do Unit testing.
- These are automated tests. We can run these tests any number of times. You can run the tests every hour or when ever a change is there in the code.
- When ever the test fail u will be notified. These can be run under Continuous Integration.

24. First JUnit Project & Green Bar
- Absent of failure is Success in JUnit Framework.

25. First Code & First Unit Test
- See the project.

26. Other Assert Methods & Important Annotations
@Before: By using this annotation on a method it will run before every test method. You can define database connection something like that in @before where you want a new connection every time. @BeforeEach from JUnit 5
@After: By using this annotation on a method it will run after every test method. @AfterEach from JUnit 5
@BeforeClass: By using this annotation on a method it will run before all the test methods in a class. This method should be static. @BeforeAll from JUnit 5. 
@AfterClass: By using this annotation on a method it will run after all the test methods in a class. This method should be static. @AfterAll from JUnit 5

27. Introduction To Mockito
- If you use stubs then u have to maintaion lot of code
- We need to create the multiple versions of the stub for different scenarios. Hence we will mocks here instead of stubs with the help of mockito.

28. Your First Mock With Mockito
mock(Class.class): This method is used to create the mock of a given class. 
when(method called).thenReturn(data): This method is used to retrun the data the stub was providing previously.
Using mockito u can use classes or interfaces to create the mocks.

29. Using Mockito Annotations - @Mock, @InjectMocks, @RunWith
@Mock: With this annotation u don't need to write the mock(Class.class) method in order to mock the class. You can just use the @Mock annotation.
@InjectMocks: This annotations is used to inject the mocks in the class where the dependencies are there.
@RunWith(MockitoJUnitRunner.class): When you use mockito annotation then u need to use the @RunWith annotation on the test class.

30. Mocking List Interface
- See project for details.

31. Spring Unit Testing With A Java Context
@ContextConfiguration(classes=SpringBasicStepsApplication.class): Define the  configuration context.
@RunWith(SpringRunner.class): The runner will launch the specific context defined ny the @ContextConfiguration
@Autowired: To get the bean from the context.

32. Spring Unit Testing With XML Context
@ContextConfiguration(locations="/applicationContext.xml"): Define the configuration context with the xml file.
- You can define a seperate test configuration xml file also.

33. Spring Unit Testing With Mockito
- We don't need @ContextConfiguration(classes=SpringBasicCdiApplication.class) for Mockito
- We use @RunWith(MockitoJUnitRunner.class)

34. Introduction To Spring Boot - Goals & Important Features
Goals
Enable building production ready applications quickly
Provide common non-functional features 
- embedded servers
- metrics
- health checks
- externalized configuration

What Spring Boot is NOT!
ZERO code generation
Neither an application server nor a web server

Features
Quick Starter Projects with Auto Configuration
 - Web
 - JPA
Embedded Servers - Tomcat, Jetty or Undertow (During deployment u can just install java and the tomcat is packaged along 
with the application jar no need to install it on the linux box. In the world of microsservices it will make a huge difference).
Production-ready features
 - metrics and health checks 
 - externalized configuration

 35. Developing Spring Applications Before Spring Boot
 - Choosing the frameworks to use and which versions to use is the major decision that wee needed to make before spring boot.
 - We needed to define the complete configuration file.
 - We needed to configure the view resolver to redirect the view to the jsp.
 - To implement the internalization we need to implement a message source and also a localeresolver
 - We needed to configure the web.xml also i.e configure the DispatcherServlet, configure the context configuration location, configure the spring security filter
 - We needed to configure many dependencies, versions, configurations, internalization, logging etc.
 All these we have to do on our own before spring boot, but with the help of spring boot simple starter project 'spring boot starter web' in combination with 
 spring boot starter security will eliminate a lot of configuration that we described.

 36. Using Spring Initializer To Create A Spring Boot Application
 - Go to start.spring.io
 - GroupId : com.springboot.basics
 - ArtifactId: springbootbasics
 - Add web and Generate project.

 37. Create A Simple Rest Controller
 - Create a Book pojo
 - Create a BookController with @RestController: 
 - Create a method that returns the books with @GetMapping("/books") 
 - Here we have a created a Rest Service in less than 5 minutes 
 - We have just focused on creating the REST Service. We have not focussed on either configuring a framework, beans, dispatcher servlet, beans, logging or view resolver.
 - lsof -i :8080 //command to see which process is running on a given port number

 38. What Is Spring Boot Auto Configuration
 @SpringBootApplication - It indicates that is it is a spring context file.
 	- It enables AutoConfiguration.
 	- It enables ComponentScan on the current package.

Spring Boot looks at a) Frameworks available on the CLASSPATH 
b) Existing configuration for the application. Based on these, Spring Boot provides basic configuration needed to configure the application with these frameworks.
This is called Auto Configuration.

38. Spring Boot vs Spring vs Spring MVC
Spring Framework: Most important feature of spring framework is DI. At the core of all Spring Modules is DI or IOC.
	- Solvers Duplication / Plumbing Code.
	- Good Integration With Other Frameworks
	 	- Hibernate for ORM
	 	- iBatis for Object Mapping
	 	- JUnit & Mockito for Unit Testing
Spring Boot
Spring MVC : Spring MVC Framework provides decoupled way of developing web applications. With simple concepts like Dispatcher Servlet, ModelAndView and View Resolver, it makes
it easy to develop web applications.

39. Spring Boot Starter Projects - Starter Web & Starter JPA
Starter Web & Starter JPA are the spring boot starter projects.

40. Spring Boot Actuator
- It brings a lot of monitoring around your application. 
- You want to see wat are the beans u have configured, how auto configuration work, how many times a specific service is called etc. All these you can do with the help of
spring actuator.
- It exposes a lot of REST Services. We use the HAL browser to see the data provided by the services.
- Spring Tools Eclipse Plugin to get the automated code in properties file.
- Access url for actuator localhost:8080/acutator/
- For HAL Browser http://localhost:8080/browser/index.html#/
- Enter actuator and press Go.

41. Spring Boot Developer Tools
- Tools to restart the server automatically when we do some changes in the IDE.
- If you stop and restart then it will load the whole application again that takes lot of time
- But with the deveoper tools only the changes that are done are only loaded.

42. Setting Up AOP Example
Generate project with AOP Dependency from start.spring.io
We can use spring AOP to intercept any calls to beans
AspectJ is much more powerful you can even interspect change of values on a field.
Spring AOP is not powerful as AspectJ
AOP is the best approach for implementing the cross cutting concerns.

43. Setting Up AOP and @Before Advice
@Aspect & @Configuration : These are used to define the AOP file
@Before("execution(* com.spring.aop.springaop.business.*.*(..)"): It intercepts before call to every method of all classes of all methods of any returntype in the business package.
- This annotation intercepts before the actual method call is invoked.
JointPoint: With the help of jointPoint parameter we can get the details of the method calls.

44. Understand AOP Terminology - Pointcut, Advice, Aspect And JoinPoint
Pointcut: The expression which defines what kind of methods we want to intercept is called the Pointcut.
Advice: What should we do when we intercepet the method is called Advice. The logic is called Advice.
Aspect: The combination of Advice & Pointcut is called an Aspect.
JoinPoint: It is a specific interception of a method call. It is a specific execution instance. If 100 methods calls are intercepted then there will be 100 Joinpoints.
Weaving: Process where this whole thing gets weaved around your code is called weaving.
Weaver: The framework which does weaving is called Weaver.

45. Using @After, @AfterReturning, @AfterThrowing Advices
@AfterReturning: It is executed only when the execution is completed succesfully. 
@AfterThrowing: It is executed when there occours some exception.
@After: It is common one where it is throwing exception or returning a value we can use this.

46. Using @Around Advice To Implement Performance Tracing 
@Around: It is used to calculate the time taken by a method to get executed. 
Here we use ProceedingJoinpoint as parameter instead of JoinPoint.

47. Use Common Pointcut Configuration
- We can define all the pointcuts in a separate file.
@Pointcut("execution(* com.spring.aop.springaop.business.*.*(..)")

48. Creating Custom Annotation And An Aspect For Tracking Time
We define a pointcut of annotation type by using the custom annotation. It will work on those methods which will have the custom annotation on it. 

49. Setting Up A Project With JDBC, JPA, H2 & Launching H2 Console
application.properties: spring.h2.console.enabled=true
H2 database url: localhost:8080/h2-console
JDBC Url: jdbc:h2:mem:testdb
H2 database will be running as long as the application will be running. Once the application stops the database will be deleted.
H2 is in-memory database

50. Create A Database Table & Populate Data
- See the project.

51. Retrieve The Data Using CommandLineRunner
- See the project.

52. Spring JDBC vs JDBC
- In Spring JDBC lot of code is reduced.
- We don't need to do exception handling in Spring JDBC
- Automatic connection close is handled by Spring JDBC.
- Spring JDBC is very easy and chances of doing mistakes is reduced in Spring JDBC.

53. Understanding Spring Boot AutoConfiguration
=========================
AUTO-CONFIGURATION REPORT
=========================

DataSourceAutoConfiguration matched:
   - @ConditionalOnClass found required classes 'javax.sql.DataSource', 'org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseType'; @ConditionalOnMissingClass did not find unwanted class (OnClassCondition)

DataSourceTransactionManagerAutoConfiguration matched:
   - @ConditionalOnClass found required classes 'org.springframework.jdbc.core.JdbcTemplate', 'org.springframework.transaction.PlatformTransactionManager'; @ConditionalOnMissingClass did not find unwanted class (OnClassCondition)

H2ConsoleAutoConfiguration matched:
   - @ConditionalOnClass found required class 'org.h2.server.web.WebServlet'; @ConditionalOnMissingClass did not find unwanted class (OnClassCondition)
   - found ConfigurableWebEnvironment (OnWebApplicationCondition)
   - @ConditionalOnProperty (spring.h2.console.enabled=true) matched (OnPropertyCondition)

JdbcTemplateAutoConfiguration matched:
   - @ConditionalOnClass found required classes 'javax.sql.DataSource', 'org.springframework.jdbc.core.JdbcTemplate'; @ConditionalOnMissingClass did not find unwanted class (OnClassCondition)
   - @ConditionalOnSingleCandidate (types: javax.sql.DataSource; SearchStrategy: all) found a primary bean from beans 'dataSource' (OnBeanCondition)

JdbcTemplateAutoConfiguration.JdbcTemplateConfiguration#jdbcTemplate matched:
   - @ConditionalOnMissingBean (types: org.springframework.jdbc.core.JdbcOperations; SearchStrategy: all) did not find any beans (OnBeanCondition)\

54. Implementing findById Spring JDBC Query Method
- See the project.

55. Implementing deleteById Spring JDBC Query Method
- See the project.

56. Implementing Insert & Update Spring JDBC Query Method
- See the project.

57. Creating Custom Spring JDBC RowMapper
- If the data which is coming back from the table is of different structure compared to your bean for example if the column names don't really match with the field name in the Bean.
In this kind of situations we will create our own RowMapper.

58. Quick Introduction To JPA & Defining Person Entity
- In JPA we will map the beans to the tables. JPA do object relational mapping.
- Hibernate implements JPA
- Hibernate was present before JPA

59. Implementing CRUD Using JPA
application.properties: spring.jpa.show-sql=true
- See the project. 

60. Implementing findAll Using JPQL Named Query
- See the project.

61. Introduction To Spring Data JPA
- There is a lot of duplication writing the Repository using JPA as if we want to implement the Repository class code for Employee we just have to copy paste and change the Entity name. This is just the duplication of code.

62. First Java Web Application Using Spring MVC
- See the project.

63. Create LoginServlet From The Scratch
- Jsp's are finally compiled to servlets.
- See the project. 

64. Passing Request Parameters Using Get Method
- Expression langauage is used to dynamically pickup content from Request, Session & other things.
- See the project.

65. Introduction & End To Scriplets
- You can write java code in the Jsp's.
- For this we use scriplets <% %> like Php. <? >
- You can also do imports. 
- But writing lot of java code using scriplets is a very very bad practice. We use expression language instead of scriplets. 

66. Disadvantages Of Get Parameters
- When ever you access a website or send a request it will pass through n number of routers. Anybody in the router can see the url u are passing in. 
Hence any of the router can be able to see the inf in your url. Hence get method is not secure.

67. Your First Post Request & doPost Method
- We can use a form and create a post request to send information more securely.

68. Validate Credentinals With ValidationService
- See the project. 

69. Setting Up Spring MVC
- Add spring mvc depenency
- Configure the Dispatcher Servlet (Spring MVC uses the pattern called Front Controller (Front Controller is basically something where all the requests would first go to the Dispatcher Servlet and only then the Dispatcher Servlet would send it to a controller or a jsp etc. This pattern is called Front Controller Pattern)
- We have to add the Dispatcher Servlet to the web.xml file.
- Servlets are usually added in web.xml or Annotation @Controller is used.

70. Your First Spring MVC Controller
@Controller : Instead of extending it with HTTPServlet class in Spring MVC we can just use @Controller
@RequestMapping(value="/login"): To tell Dispatcher Servlet do mapping for /login url.
@ResponseBody : To tell the Dispatcher Servlet that it should use the response body.

71. Your First Spring MVC View: View Resolver
- If you use @ResponseBody then just login is returned in the response
- If you remove @ResponseBody then also you will get an error as /login and login will go again and again. Hence we need to add View Resolver.
- A View Resolver will redirect the login -> /WEB-INF/view/login.jsp.
- View Resolver will add the prefix and suffix and resolve the view. 

72. Spring MVC Architecture
- See the image.

78. Add Logging Framework Log4j
log4j.rootLogger=TRACE, Appender1, Appender2
log4j.appender.Appender1=org.apache.log4j.ConsoleAppender
log4j.appender.Appender1.layout=org.apache.log4j.PatternLayout
log4j.appender.Appender1.layout.ConversionPattern=%-7p %d [%t] %c %x - %m%n
#TRACE
#DEBUG
#INFO
#WARN
#ERROR

79. Redirect To Employee Welcome Page: ModelMap & @RequestParam
@RequestMapping(value="/login") : It will handle all the request (get & post) we can restrict it as follows.
@RequestMapping(value="/login", method=RequestMethod.GET)
- See the project.

80. Use EmployeeLoginService To Authenticate
- See the project.

81. Understanding POM(Project Object Model)
- <artifactId> : Is the name we are giving to the specific project.
- <groupId> & <artifactId> are important bcoz if any project wants to use our project then they need to specify the both.
- <version>0.0.1-SNAPSHOT</version> Snapshot indicates that it is still under development.
- <packaging>jar</packaging>: jar/war/ear (An ear can contain multiple war files).
- <parent> </parent> : Ur POM files will inherit from the parent.
- <properties> <java.version>1.8</java.version></properties> : 
- <dependencies> </dependencies> : We can use the depencies as we require (spring-boot-starter-web, spring-boot-starter-test, etc.) Transitive Dependencies (Dependencies inside depdencies)
- <repositories> </repositories> : Like dependencies we have multipe repositories.

Repositories: 1. Local Repository 2. Remote Maven Repository

Local Repository: It will be on our local system.
Remote Maven Repository: Central Repostiories on Internet.




	 	





 











